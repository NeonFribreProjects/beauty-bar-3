version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    working_dir: /app/server
    ports:
      #- "80:80" replaced this with 3000 for production to fix the issue with the nginx container conflicting with the backend server port
      - "3000:3000"
    env_file:
      - ./server/.env
    environment:
      - DATABASE_URL=postgresql://postgres:kevjeff1@db:5432/beauty_bar_prod
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_APP_PASSWORD=${EMAIL_APP_PASSWORD}
      - NODE_ENV=production
      - CLIENT_URL=http://localhost:8080
      - PORT=3000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./client:/app/client
      - ./server:/app/server
      - /app/server/node_modules
      - /app/server/dist
    command: >
      sh -c "cd server &&
             npm run start:prod ||
             (echo 'Server failed to start' && exit 1)"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 45s
    networks:
      - prod-network
    restart: unless-stopped

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      app:
        condition: service_healthy
    volumes:
      - ./client/dist:/usr/share/nginx/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - prod-network
    restart: unless-stopped

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=kevjeff1
      - POSTGRES_DB=beauty_bar_prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - prod-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - prod-network

volumes:
  postgres_data:
  redis_data:

# Define networks
networks:
  prod-network:
    name: beauty-bar-prod-network